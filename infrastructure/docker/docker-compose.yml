# Docker Compose for Ohrid Water Demand Research Framework
# Provides complete development and deployment environment

version: '3.8'

services:
  # Development environment with Jupyter
  development:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: development
    ports:
      - "8888:8888"
    volumes:
      - ../../:/app
      - /app/infrastructure/docker  # Exclude docker files from mount
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ohrid-network
    
  # Production API server
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: api
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ../../models:/app/models:ro
      - ../../config:/app/config:ro
    networks:
      - ohrid-network
    depends_on:
      - redis
    restart: unless-stopped
    
  # ML Training environment
  training:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: training
    ports:
      - "5000:5000"  # MLflow
      - "6006:6006"  # TensorBoard
    volumes:
      - ../../data:/app/data
      - ../../models:/app/models
      - ../../results:/app/results
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - MLFLOW_TRACKING_URI=http://localhost:5000
    networks:
      - ohrid-network
    
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ohrid-network
    restart: unless-stopped
    
  # PostgreSQL for metadata and results storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ohrid_water_demand
      POSTGRES_USER: ohrid_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ohrid_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ohrid-network
    restart: unless-stopped
    
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - development
    networks:
      - ohrid-network
    restart: unless-stopped
    
  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ohrid-network
    restart: unless-stopped
    
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ohrid-network
    restart: unless-stopped

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# Custom network
networks:
  ohrid-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16